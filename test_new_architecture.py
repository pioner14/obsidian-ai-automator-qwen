#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã Obsidian AI Automator
"""
import os
import tempfile
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.join(os.path.dirname(__file__)))

from obsidian_ai_automator.core.orchestrator import ProcessingOrchestrator
from obsidian_ai_automator.processing.transcription.deepgram_transcriber import DeepgramTranscriber
from obsidian_ai_automator.processing.analysis.nvidia_analyzer import NvidiaAnalyzer
from obsidian_ai_automator.processing.output.obsidian_formatter import ObsidianFormatter


def test_transcriber_creation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–µ—Ä–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–µ—Ä –±–µ–∑ API-–∫–ª—é—á–∞ - –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —É—Å–ø–µ—à–Ω–æ
        # API-–∫–ª—é—á –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –º–µ—Ç–æ–¥–æ–≤
        transcriber = DeepgramTranscriber(api_key=None)
        print("‚úì –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –±–µ–∑ API-–∫–ª—é—á–∞")
        return True
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–µ—Ä–∞: {e}")
        return False


def test_analyzer_creation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –±–µ–∑ API-–∫–ª—é—á–∞ - –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —É—Å–ø–µ—à–Ω–æ
        # API-–∫–ª—é—á –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –º–µ—Ç–æ–¥–æ–≤
        analyzer = NvidiaAnalyzer(api_key=None)
        print("‚úì –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –±–µ–∑ API-–∫–ª—é—á–∞")
        return True
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞: {e}")
        return False


def test_formatter_creation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞"""
    try:
        formatter = ObsidianFormatter()
        print("‚úì –§–æ—Ä–º–∞—Ç—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
        return True
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞: {e}")
        return False


def test_config_loading():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        orchestrator = ProcessingOrchestrator()
        print("‚úì –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")
        return True
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        return False


def run_all_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã Obsidian AI Automator ===\n")
    
    tests = [
        ("–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–µ—Ä–∞", test_transcriber_creation),
        ("–°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞", test_analyzer_creation),
        ("–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞", test_formatter_creation),
        ("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", test_config_loading)
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"–¢–µ—Å—Ç: {test_name}")
        result = test_func()
        results.append((test_name, result))
        print()
    
    print("=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ===")
    passed = 0
    for test_name, result in results:
        status = "‚úì –ü–†–û–ô–î–ï–ù" if result else "‚úó –ù–ï –ü–†–û–ô–î–ï–ù"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\n–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤")
    
    if passed == len(results):
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        return False


if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1)